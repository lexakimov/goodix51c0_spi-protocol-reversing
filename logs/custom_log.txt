
init
   write    4 -  0000: a0 08 00 a8
   write    8 -  0000: 01 05 00 00 00 00 00 88
!!not to wait for ack


force unlock TLS
   write    4 -  0000: a0 06 00 a6
   write    6 -  0000: d5 03 00 00 00 d3
!!not to wait for ack


Get Evk Version
   write    4 -  0000: a0 08 00 a8
   write    8 -  0000: 01 05 00 00 00 00 00 88
!!not to wait for ack
   write    4 -  0000: a0 06 00 a6
   write    6 -  0000: a8 03 00 00 00 ff
get ack for cmd 0xa8, cfg flag 0x7
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 a8 07 48
recvd data cmd-len: 0xa8-23
    read    4 -  0000: a0 1a 00 ba
    read   26 -  0000: a8 17 00 47 46 5f 48 43 34 36 30 53 45 43 5f 41
    read   26 -  0010: 50 50 5f 31 34 32 31 30 00 68
got evk version: GF_HC460SEC_APP_14210


get MCU state
   write    4 -  0000: a0 08 00 a8
   write    8 -  0000: 01 05 00 00 00 00 00 88
!!not to wait for ack
   write    4 -  0000: a0 06 00 a6
   write    6 -  0000: 97 03 00 01 01 0f
!!not to wait for ack

GET MCU STATE - mcu-state TIMESTAMP 0xbf5c
   write    4 -  0000: a0 09 00 a9
   write    9 -  0000: af 06 00 55 5c bf 00 00 86
!!not to wait for ack
recvd data cmd-len: 0xae-23
    read    4 -  0000: a0 1a 00 ba
    read   26 -  0000: ae 17 00 04 00 30 00 00 00 00 00 20 00 00 00 00
    read   26 -  0010: 01 00 00 04 25 02 00 00 00 65
mcu state::0x04003000000000002000000000010000042502000000
    version:4
    isPOVImageValid:0
    isTlsConnected:0
    isTlsUsed:0
    isLocked:0
    availImgCnt:0
    povImgCnt:3
    sensor_data_int_timeout_count:0
    image_crc_fail_count:0
    povTouchAccidentCnt:0x0
    readChipIDCnt:0
    sensorExceptionFlag:0
    sensorUnexpectedIntCnt:0
    to_master_timeout_count:0
    psk_len:32
    psk_check_fail:0
    psk_write_fail:0
    ec_falling_count:0
    system_up_stop_cnt:0
    system_down_pov_stop_cnt:0
    system_up_cleared_pov_count:0
    pov_wake_by_fp:1
    pov_wake_by_ec:0
    pov_procedure:0x0
    config_down_flag:0
    sensor_chip_id:0x2504
    sensor_type:2
    pov_capture_count:0
    normal_capture_count:0
    otp_mcu_check_status:0x0


Get Evk Version...retry count 3 (повтор)
   write    4 -  0000: a0 08 00 a8
   write    8 -  0000: 01 05 00 00 00 00 00 88
!!not to wait for ack
   write    4 -  0000: a0 06 00 a6
   write    6 -  0000: a8 03 00 00 00 ff
get ack for cmd 0xa8, cfg flag 0x7
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 a8 07 48
recvd data cmd-len: 0xa8-23
    read    4 -  0000: a0 1a 00 ba
    read   26 -  0000: a8 17 00 47 46 5f 48 43 34 36 30 53 45 43 5f 41
    read   26 -  0010: 50 50 5f 31 34 32 31 30 00 68
got evk version: GF_HC460SEC_APP_14210


!!!REE SPI MCU:Update firmware
!!!Update HDSC firmware
CONFIG DATA: retry_count_for_common_init 3
Nowversion len21 :GF_HC460SEC_APP_14210, firmwareLen=109514, UpdateByDriver=1
Current MCU Version GF_HC460SEC_APP_14210, Version in Driver GF_HC460SEC_APP_14210
the same version, no need to update firmware
update firmware result 1


production_psk_process
get host_psk_data
check psk if valid (total times:2)
check psk times: 1
1.get host hash
 .get seal data
--- далее читаем содержимое файла Goodix_Cache.bin, если он пустой, получаем psk с контролера:
    read 0 bytes
    0.read specific data_type 0xbb010002
    2.read data from mcu
    write    4 -  0000: a0 0c 00 ac
    write   12 -  0000: e4 09 00 02 00 01 bb 00 00 00 00 ff
    get ack for cmd 0xe4, cfg flag 0x7
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 e4 07 0c
    recvd data cmd-len: 0xe4-342
    production response pure data length=341
    read    4 -  0000: a0 59 01 fa
    read  345 -  0000: e4 56 01 00 02 00 01 bb 4c 01 00 00 01 00 00 00
    read  345 -  0010: d0 8c 9d df 01 15 d1 11 8c 7a 00 c0 4f c2 97 eb
    read  345 -  0020: 01 00 00 00 ce 4b 48 a6 19 9f e1 4c a7 a3 2e 7a
    read  345 -  0030: 0e 0b 6b 59 04 00 00 00 40 00 00 00 54 00 68 00
    read  345 -  0040: 69 00 73 00 20 00 69 00 73 00 20 00 74 00 68 00
    read  345 -  0050: 65 00 20 00 64 00 65 00 73 00 63 00 72 00 69 00
    read  345 -  0060: 70 00 74 00 69 00 6f 00 6e 00 20 00 73 00 74 00
    read  345 -  0070: 72 00 69 00 6e 00 67 00 2e 00 00 00 10 66 00 00
    read  345 -  0080: 00 01 00 00 20 00 00 00 d7 77 c2 10 c1 bc 73 d2
    read  345 -  0090: 87 fb 57 99 53 16 39 0e 39 eb 6a d0 43 cd 08 19
    read  345 -  00a0: e0 82 a6 cb 14 8b 38 47 00 00 00 00 0e 80 00 00
    read  345 -  00b0: 00 02 00 00 20 00 00 00 e9 2d 13 48 1b e6 8b 22
    read  345 -  00c0: b5 b3 7a b3 9a 65 4b 3e 73 f6 6a a7 af 47 49 31
    read  345 -  00d0: a6 4c 47 84 bd c4 32 f9 30 00 00 00 15 67 c9 fc
    read  345 -  00e0: 68 79 ba 11 cc 3e fb 30 82 be 3a b7 1c 18 f9 cd
    read  345 -  00f0: ef 08 0d dc 1a b9 17 79 17 9b 79 42 73 1a b8 2d
    read  345 -  0100: 8e 31 b6 8a 0f b1 cb 3b 0c 83 15 8e 40 00 00 00
    read  345 -  0110: ee b8 30 22 43 74 f3 15 cf 0c 60 c9 c7 40 32 6f
    read  345 -  0120: 7e e7 99 f2 21 75 11 58 d2 71 59 33 66 ed a7 a3
    read  345 -  0130: 43 66 12 5b e1 11 73 2a a3 59 83 1e 83 66 50 88
    read  345 -  0140: f4 2c 6f c8 f7 5e 93 3d 07 c9 97 fc 05 f9 30 9c
    read  345 -  0150: b6 a0 6b f1 a4 18 8a cf 3b
    2.parse return data
    # [длина пакета 345]
    # e4
    # 56 01 [указание полезной длины + контрольная сумма = 342]
    # 00
    # specific data_type 0xbb010002 (был указан в запросе)
    # 02 00 01 bb
    # длина host_psk_data (332)
    # 4c 01
    # 00 00
    # далее host_psk_data (содержимое Goodix_Cache.bin, длина 332)
    # 01 00 00 00
    # d0 8c 9d df 01 15 d1 11 8c 7a 00 c0 4f c2 97 eb
    # 01 00 00 00 ce 4b 48 a6 19 9f e1 4c a7 a3 2e 7a
    # 0e 0b 6b 59 04 00 00 00 40 00 00 00 54 00 68 00
    # 69 00 73 00 20 00 69 00 73 00 20 00 74 00 68 00
    # 65 00 20 00 64 00 65 00 73 00 63 00 72 00 69 00
    # 70 00 74 00 69 00 6f 00 6e 00 20 00 73 00 74 00
    # 72 00 69 00 6e 00 67 00 2e 00 00 00 10 66 00 00
    # 00 01 00 00 20 00 00 00 d7 77 c2 10 c1 bc 73 d2
    # 87 fb 57 99 53 16 39 0e 39 eb 6a d0 43 cd 08 19
    # e0 82 a6 cb 14 8b 38 47 00 00 00 00 0e 80 00 00
    # 00 02 00 00 20 00 00 00 e9 2d 13 48 1b e6 8b 22
    # b5 b3 7a b3 9a 65 4b 3e 73 f6 6a a7 af 47 49 31
    # a6 4c 47 84 bd c4 32 f9 30 00 00 00 15 67 c9 fc
    # 68 79 ba 11 cc 3e fb 30 82 be 3a b7 1c 18 f9 cd
    # ef 08 0d dc 1a b9 17 79 17 9b 79 42 73 1a b8 2d
    # 8e 31 b6 8a 0f b1 cb 3b 0c 83 15 8e 40 00 00 00
    # ee b8 30 22 43 74 f3 15 cf 0c 60 c9 c7 40 32 6f
    # 7e e7 99 f2 21 75 11 58 d2 71 59 33 66 ed a7 a3
    # 43 66 12 5b e1 11 73 2a a3 59 83 1e 83 66 50 88
    # f4 2c 6f c8 f7 5e 93 3d 07 c9 97 fc 05 f9 30 9c
    # b6 a0 6b f1 a4 18 8a cf
    # контрольная сумма
    # 3b
    # return data, len_payload_mcu  341 bytes, passed 2048 bytes, result 0.
    # read from mcu done, copy 340 bytes back
    # production_get_host_psk_data

generate rootkey
inbuf_len 324, entropy_len 48, len_out 32
The decryption phase worked, 324, 32
unseal return 0x0 length before 324, length after:32
.wb data
wb return 0x0 length before 32, length after:102
.hash
hash return 0x0 length before 102, length after:32
ret 0x0, psk len 32, hash len 32, seal len 332, data from file flag 0


2.get mcu hash
0.read specific data_type 0xbb020003
2.read data from mcu
   write    4 -  0000: a0 0c 00 ac
   write   12 -  0000: e4 09 00 03 00 02 bb 00 00 00 00 fd
get ack for cmd 0xe4, cfg flag 0x7
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 e4 07 0c
recvd data cmd-len: 0xe4-42
production response pure data length=41
    read    4 -  0000: a0 2d 00 cd
    read   45 -  0000: e4 2a 00 00 03 00 02 bb 20 00 00 00 fb 67 d3 ed
    read   45 -  0010: e2 44 ff ee b2 76 3c b5 0e e3 81 a3 e6 18 d5 23
    read   45 -  0020: 8d 61 94 53 43 35 8d 08 0f d0 2d a7 ce
2.parse return data

# # полный пакет [длина 45]
# E4
# 2A 00 [длина 42 = полезная длина (41) + 1 байт контрольной суммы]
# 00
# # specific data_type 0xbb020003 (был указан в запросе)
# 03 00 02 BB
# # длина psk (32)
# 20 00
# 00 00
# # далее psk (длина 32)
# FB 67 D3 ED E2 44 FF EE B2 76 3C B5 0E E3 81 A3 E6 18 D5 23 8D 61 94 53 43 35 8D 08 0F D0 2D A7 [len 32] PSK
#
# # контрольная сумма
# CE
production_read_mcu           - return data, len_payload_mcu  41 bytes, passed 2048 bytes, result 0.
production_read_mcu           - read from mcu done, copy 40 bytes back
production_read_specific_data - read data from mcu ret:0x0, length: 40
production_check_psk_is_valid - get mcu hash, ret 0x0, len 32

3.verify
!!!hash equal !!!
written 332:332 bytes to file  (Goodix_Cache.bin)
    0xbb010002 - psk hash (длина 332) Goodix_Cache.bin
    0xbb020003 - psk (длина 32) (возможно надо развернуть)
init_MCU ЗАВЕРШЕНА

----------------------------------------------------------------------------------------

init_FPSensor

reset sensor
reset device, reset_flag 1
   write    4 -  0000: a0 06 00 a6
   write    6 -  0000: a2 03 00 01 14 f0
get ack for cmd 0xa2, cfg flag 0x7
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 a2 07 4e
recvd data cmd-len: 0xa2-4
    read    4 -  0000: a0 07 00 a7
    read    7 -  0000: a2 04 00 01 00 08 fb
CHIP_RESET::0x010008


MILAN_CHIPID
   write    4 -  0000: a0 09 00 a9
   write    9 -  0000: 82 06 00 00 00 00 04 00 1e
get ack for cmd 0x82, cfg flag 0x7
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 82 07 6e
cmd: regrw
    read    4 -  0000: a0 08 00 a8
    read    8 -  0000: 82 05 00 a2 04 25 00 58
Get Chip ID: 0x2504

GET OTP
device_enable_init_by_chip - to init device by chipid 0x2504
sensor info ready, chipid:0x2504, sensorType:12, col:80, row:64
to set state to DEVICE_ACTION
to set state from 1 to 3
   write    4 -  0000: a0 06 00 a6
   write    6 -  0000: a6 03 00 00 00 01
get ack for cmd 0xa6, cfg flag 0x7
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 a6 07 4a
recvd data cmd-len: 0xa6-65
    read    4 -  0000: a0 44 00 e4
    read   68 -  0000: a6 41 00 53 34 30 36 36 36 2e 00 0a 7d 82 b3 72
    read   68 -  0010: a0 46 0a 51 07 05 0e 7d 4b 17 27 41 02 9a 0c f1
    read   68 -  0020: 80 7f 0c 07 81 30 38 e4 80 dd fc 0a be bb 44 01
    read   68 -  0030: bb b3 b5 b3 b3 b3 b5 b3 b3 41 33 e4 1b dd 22 0c
    read   68 -  0040: f0 17 db 1c
Got sensor OTP::0x5334303636362e000a7d82b372a0460a5107050e7d4b172741029a0cf1807f0c07813038e480ddfc0abebb4401bbb3b5b3b3b3b5b3b34133e41bdd220cf017db
Success to get OTP data (64 байта)
OTP (хранится в goodix.dat) длина 64
ChicagoHU_check_and_parse_otp -  read 0 bytes from C:\ProgramData\Goodix\goodix.dat

????
ChicagoHU_OTP_CRC_Check                 cp check CRC=12, chip cp CRC=12
ChicagoHU_OTP_CRC_Check                 ft check CRC=240, chip ft CRC=240
ChicagoHU_OTP_CRC_Check                 mt check CRC=219, chip mt CRC=219
ChicagoHU_OTP_DAC_Check                 ft dac crc check CRC=23, otp CRC=23
ChicagoHU_check_otp                     from otp dac 0xb38, dac1 0xb5, dac2 0xb3, dac3 0xb3
modify_sensor_config                    reg 0x0220, before update: 0x0808, after update:0x0b38 (0x0b38: 0xb|0x38)
modify_sensor_config                    reg 0x0236, before update: 0x0080, after update:0x00b5 (0x00b5: 0x0|0xb5)
modify_sensor_config                    reg 0x0238, before update: 0x0080, after update:0x00b3 (0x00b3: 0x0|0xb3)
modify_sensor_config                    reg 0x023a, before update: 0x0080, after update:0x00b3 (0x00b3: 0x0|0xb3)
ChicagoHU_check_and_parse_otp           USED OTP::0x5334303636362e000a7d82b372a0460a5107050e7d4b172741029a0cf1807f0c07813038e480ddfc0abebb4401bbb3b5b3b3b3b5b3b34133e41bdd220cf017db
modify_sensor_config                    reg 0x005c, before update: 0x0180, after update:0x0100 (0x0100: 0x1|0x0)
modify_sensor_config                    reg 0x0082, before update: 0x1580, after update:0x1b80 (0x1b00: 0x1b|0x0)
ChicagoHU_check_and_parse_otp           OTP tcode 256, fdt delta 27
ChicagoHU_check_and_parse_otp           fdtOffset:0x0
device_action                           to set state to DEVICE_ENABLE
set_state                               to set state from 3 to 1
init_FPSensor                           FDT_Init, sensortype: 12, fdt_delta:27, tcode:256
device_action                           to set state to DEVICE_ACTION
set_state                               to set state from 1 to 3

gf_download_config                      enter

reset sensor                        (повтор)
reset device, reset_flag 1
   write    4 -  0000: a0 06 00 a6
   write    6 -  0000: a2 03 00 01 14 f0
get ack for cmd 0xa2, cfg flag 0x7
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 a2 07 4e
recvd data cmd-len: 0xa2-4
    read    4 -  0000: a0 07 00 a7
    read    7 -  0000: a2 04 00 01 00 08 fb
CHIP_RESET::0x010008


setmode: idle
   write    4 -  0000: a0 06 00 a6
   write    6 -  0000: 70 03 00 14 00 23
get ack for cmd 0x70, cfg flag 0x7
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 70 07 80


(DAC - Digital-to-analog converter)
Dac sent::0x380bb500b300b300
   write    4 -  0000: a0 0c 00 ac
   write   12 -  0000: 98 09 00 38 0b b5 00 b3 00 b3 00 ab
get ack for cmd 0x98, cfg flag 0x7
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 98 07 58
recvd data cmd-len: 0x98-3
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: 98 03 00 01 00 0e
wrote down dac 0xb38, dac1 0xb5,dac2 0xb3, dac3 0xb3


   write    4 -  0000: a0 e4 00 84
   write  228 -  0000: 90 e1 00 70 11 74 85 00 85 2c b1 18 c9 14 dd 00
   write  228 -  0010: dd 00 dd 00 ba 00 01 80 ca 00 04 00 84 00 15 b3
   write  228 -  0020: 86 00 00 c4 88 00 00 ba 8a 00 00 b2 8c 00 00 aa
   write  228 -  0030: 8e 00 00 c1 90 00 bb bb 92 00 b1 b1 94 00 00 a8
   write  228 -  0040: 96 00 00 b6 98 00 00 00 9a 00 00 00 d2 00 00 00
   write  228 -  0050: d4 00 00 00 d6 00 00 00 d8 00 00 00 50 00 01 05
   write  228 -  0060: d0 00 00 00 70 00 00 00 72 00 78 56 74 00 34 12
   write  228 -  0070: 20 00 10 40 5c 00 00 01 20 02 38 0b 36 02 b5 00
   write  228 -  0080: 38 02 b3 00 3a 02 b3 00 2a 01 82 03 22 00 01 20
   write  228 -  0090: 24 00 14 00 80 00 01 00 5c 00 00 01 56 00 04 20
   write  228 -  00a0: 58 00 03 02 32 00 0c 02 66 00 03 00 7c 00 00 58
   write  228 -  00b0: 82 00 80 1b 2a 01 08 00 54 00 10 01 62 00 04 03
   write  228 -  00c0: 64 00 19 00 66 00 03 00 7c 00 00 58 2a 01 08 00
   write  228 -  00d0: 52 00 08 00 54 00 00 01 66 00 03 00 7c 00 00 58
   write  228 -  00e0: 00 53 66 8f
get ack for cmd 0x90, cfg flag 0x7
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 90 07 60
recvd data cmd-len: 0x90-3
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: 90 03 00 01 00 16

gf_download_config - exit, ret 1

init_FPSensor - done

Init Device Done Successfully

----------------------------------------------------------------------------------------
tls handshake flag is marked to false
CONFIG DATA: time_wait_for_tls 1100, time_wait_for_pov 2000

tls init...
tlslib_server_init
tlslib_server_exit
tlslib_server_exit
TLS Init Success, Set tls inited to TRUE
   write    4 -  0000: a0 06 00 a6
   write    6 -  0000: d1 03 00 00 00 d7
!!not to wait for ack
    read    4 -  0000: b0 34 00 e4
    read   52 -  0000: 16 03 03 00 2f 01 00 00 2b 03 03 2d f4 51 58 cf
    read   52 -  0010: 8c b1 40 46 f6 b5 4b 29 31 03 47 04 5b 70 30 b4
    read   52 -  0020: 5d fd 20 78 7f 8b 1a d8 59 29 50 00 00 04 00 a8
    read   52 -  0030: 00 ff 01 00
---- pack len: 52
tls handshake package, state: 0

отправляем пакет в ssl сервер

process_tls_data
TLS LOG: => read
TLS LOG: => handshake
TLS LOG: => flush output
TLS LOG: <= flush output
TLS LOG: => flush output
TLS LOG: <= flush output
TLS LOG: => parse client hello
TLS LOG: => fetch input
TLS LOG: in_left: 0, nb_want: 5
tls inited 1
bytes to read: 47, bytes left: 47
bytes read: 47, bytes left: 0
TLS LOG: in_left: 5, nb_want: 52
TLS LOG: ssl->f_recv(_timeout)() returned 47 (-0xffffffd1)
TLS LOG: <= fetch input
TLS LOG: selected ciphersuite: TLS-PSK-WITH-AES-128-GCM-SHA256  <<<<<<
TLS LOG: <= parse client hello
TLS LOG: server state: 2
TLS LOG: => flush output
TLS LOG: <= flush output
TLS LOG: => write server hello
TLS LOG: => write handshake message
TLS LOG: => write record
TLS LOG: => flush output
TLS LOG: message length: 86, out_left: 86

Поучаем ответ от ssl сервера, отправляем сканеру

SENT DATA LEN: 86, 90
   write    4 -  0000: b0 56 00 06
   write   86 -  0000: 16 03 03 00 51 02 00 00 4d 03 03 4d 0c e6 59 6e
   write   86 -  0010: a4 73 8a c9 72 e5 d7 8d 88 00 80 11 a8 02 a7 2c
   write   86 -  0020: 05 d8 f5 65 59 cd 6b f7 d1 e5 7e 20 d8 1d 9a 51
   write   86 -  0030: 97 27 f1 d8 d4 1f f3 5d 63 1b 78 16 7b 05 19 bd
   write   86 -  0040: 89 a9 c8 36 62 b2 93 1d c5 7f 36 00 00 a8 00 00
   write   86 -  0050: 05 ff 01 00 01 00

# одинаковое 16 03 03 00 51 02 00 00 4d 03 03 [..] 00 a8 00 00 05 ff 01 00 01 00

tls init...done within 31ms, system slow index 2, time for checking tls-hand-shake 1100ms, time_tls_handshake:2200

SENT DATA LEN: 9, 13
   write    4 -  0000: b0 09 00 b9
   write    9 -  0000: 16 03 03 00 04 0e 00 00 00
MilanEvtInterruptWorkItem
    read    4 -  0000: b0 1a 00 ca
    read   26 -  0000: 16 03 03 00 15 10 00 00 11 00 0f 43 6c 69 65 6e
    read   26 -  0010: 74 5f 69 64 65 6e 74 69 74 79
MilanEvtInterruptWorkItem
    read    4 -  0000: b0 06 00 b6
    read    6 -  0000: 14 03 03 00 01 01

    read    4 -  0000: b0 2d 00 dd
    read   45 -  0000: 16 03 03 00 28 00 00 00 00 00 00 00 00 b7 f2 4c
    read   45 -  0010: 73 94 8d 2b 4f 92 4a 6c 8c c8 3c 47 da 32 ad cc
    read   45 -  0020: 25 62 f7 cc 66 87 09 ce 24 17 4f ef 51

SENT DATA LEN: 6, 10
   write    4 -  0000: b0 06 00 b6
   write    6 -  0000: 14 03 03 00 01 01

SENT DATA LEN: 45, 49
   write    4 -  0000: b0 2d 00 dd
   write   45 -  0000: 16 03 03 00 28 00 00 00 00 00 00 00 00 3a 83 4d
   write   45 -  0010: 56 f8 35 06 ab 29 b4 2a 1a 6b b0 db ee 96 66 93
   write   45 -  0020: da 70 04 33 d7 9a be 66 c9 79 27 6f e0


   write    4 -  0000: a0 06 00 a6
   write    6 -  0000: d4 03 00 00 00 d3
get ack for cmd 0xd4, cfg flag 0x1
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 d4 01 22
Client TLS connection setup


GET MCU STATE - mcu-state TIMESTAMP 0xc314
   write    4 -  0000: a0 09 00 a9
   write    9 -  0000: af 06 00 55 14 c3 00 00 ca
!!not to wait for ack
recvd data cmd-len: 0xae-23
    read    4 -  0000: a0 1a 00 ba
    read   26 -  0000: ae 17 00 04 06 30 00 00 00 00 00 20 00 00 00 00
    read   26 -  0010: 01 00 01 04 25 02 00 00 00 5e
mcu state::0x04063000000000002000000000010001042502000000
    version:4
    isPOVImageValid:0
    isTlsConnected:1
    isTlsUsed:1
    isLocked:0
    availImgCnt:0
    povImgCnt:3
    sensor_data_int_timeout_count:0
    image_crc_fail_count:0
    povTouchAccidentCnt:0x0
    readChipIDCnt:0
    sensorExceptionFlag:0
    sensorUnexpectedIntCnt:0
    to_master_timeout_count:0
    psk_len:32
    psk_check_fail:0
    psk_write_fail:0
    ec_falling_count:0
    system_up_stop_cnt:0
    system_down_pov_stop_cnt:0
    system_up_cleared_pov_count:0
    pov_wake_by_fp:1
    pov_wake_by_ec:0
    pov_procedure:0x0
    config_down_flag:1
    sensor_chip_id:0x2504
    sensor_type:2
    pov_capture_count:0
    normal_capture_count:0
    otp_mcu_check_status:0x0

tls connected success confirmed -     (isTlsConnected:1 isTlsUsed:1)
tls handshake done (client/mcu side)



read data from file 13520 bytes
read 0-13520 bytes from C:\ProgramData\Goodix\goodix.dat
check crc :Crchost:0x82fdcaa1----crcchip:0x0

если файл существует:
got file otp::0x5334303636362e000a7d82b372a0460a5107050e7d4b172741029a0cf1807f0c07813038e480ddfc0abebb4401bbb3b5b3b3b3b5b3b34133e41bdd220cf017db
get nav base and image base from from file

imagebase exist: 0 (или 1)


gf_get_fdtbase
data sent::0x000000000000000000000000
   write    4 -  0000: a0 12 00 b2
   write   18 -  0000: 36 0f 00 09 01 00 00 00 00 00 00 00 00 00 00 00
   write   18 -  0010: 00 5b
get ack for cmd 0x36, cfg flag 0x1
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 36 01 c0
recvd data cmd-len: 0x36-17 (данные отличаются)
    read    4 -  0000: a0 14 00 b4
    read   20 -  0000: 36 11 00 00 01 00 00 [ 63 01 8a 01 4d 01 72 01 51
    read   20 -  0010: 01 70 01 ] ef
received fdt base::0x63018a014d01720151017001


gf_get_navbase
   write    4 -  0000: a0 06 00 a6
   write    6 -  0000: 50 03 00 01 00 56
get ack for cmd 0x50, cfg flag 0x1
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 50 01 a6
recvd data cmd-len: 0x50-2410
    read    4 -  0000: a0 6d 09 16
    read 2413 -  0000: 50 6a 09 00 00 00 00 00 07 fc bf 80 93 48 c9 bf
    read 2413 -  0010: 1f a0 a4 8a fa 23 33 ab a9 ca ca e8 1f a9 b0 8b
    read 2413 -  0020: 8b 03 4f b3 b9 fb 4b 80 b7 b3 bb 4b bb 6c e0 be
    read 2413 -  0030: c0 bb 7b e0 eb c3 c2 0b bb e8 f7 ba bf 7b 8c 38
    read 2413 -  0040: 2c c1 c7 fc bc 53 54 bf bf bc fc 30 38 c6 c6 4c
    read 2413 -  0050: 3c 58 4f c1 c6 fc fc a3 ff c8 c2 8b 8c 83 34 c4
    read 2413 -  0060: be 8c cb cc 1f b2 a2 0a c7 e7 c8 7e 97 c8 4a 00
    read 2413 -  0070: 33 9e a5 3a f9 f0 37 ab a9 8a 3a a3 1f ab ae 4b
...
--- recv nav data......length:2410


gf_get_fdtbase
data sent::0x80b180c580a680b980a880b8 (уже был похожий)
   write    4 -  0000: a0 12 00 b2
   write   18 -  0000: 36 0f 00 09 01 80 b1 80 c5 80 a6 80 b9 80 a8 80
   write   18 -  0010: b8 26
get ack for cmd 0x36, cfg flag 0x1
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 36 01 c0
recvd data cmd-len: 0x36-17
    read    4 -  0000: a0 14 00 b4
    read   20 -  0000: 36 11 00 00 01 00 00 [62 01 88 01 4e 01 73 01 52
    read   20 -  0010: 01 72 01 ] ed
received fdt base::0x620188014e01730152017201
fdt_downbase[0]:0xb180
fdt_downbase[1]:0xc480
fdt_downbase[2]:0xa780
fdt_downbase[3]:0xb980
fdt_downbase[4]:0xa980
fdt_downbase[5]:0xb980

fdt_base1::0x620188014e017301520172010000000000000000000000000000000000000000

   write    4 -  0000: a0 09 00 a9
   write    9 -  0000: 82 06 00 00 82 00 02 00 9e
get ack for cmd 0x82, cfg flag 0x1
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 82 01 74
recvd data cmd-len: 0x82-3
--- cmd: regrw
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: 82 03 00 80 1b 8a
fdt_delta 0x1b

gf_get_oneframe
setmode: Image
   write    4 -  0000: a0 06 00 a6
   write    6 -  0000: 20 03 00 01 00 86
get ack for cmd 0x20, cfg flag 0x1
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 20 01 d6
---- pack len: 7722
    read    4 -  0000: b0 2a 1e f8
    read 7722 -  0000: 17 03 03 1e 25 00 00 00 00 00 00 00 01 9b 88 e8
    read 7722 -  0010: 29 d0 d8 7b 63 bf 0d 0c b6 88 e2 e3 b6 4b 2d 81
    read 7722 -  0020: 42 45 91 b6 da 4b e8 8c 01 2c 05 84 8d 8f cc ee
...



data sent::0x80b180c480a780b980a980b9
   write    4 -  0000: a0 12 00 b2
   write   18 -  0000: 36 0f 00 09 01 80 b1 80 c4 80 a7 80 b9 80 a9 80
   write   18 -  0010: b9 24
get ack for cmd 0x36, cfg flag 0x1
    read    4 -  0000: a0 06 00 a6
    read    6 -  0000: b0 03 00 36 01 c0
recvd data cmd-len: 0x36-17
  read    4 -  0000: a0 14 00 b4
  read   20 -  0000: 36 11 00 00 01 00 00 62 01 88 01 4e 01 72 01 52
  read   20 -  0010: 01 73 01 ed
--- cmd: fdt
IrqStatus:0x100 cmd1 3
IRQ for fdt-manual, get fdt-up base, current mode is fdt-manual, touchflag 0x0
received fdt base::0x620188014e01720152017301
get fdt-down base, current mode is fdt-manual
fdt base:0x620188014e01720152017301
fdt_downbase[0]:0xb180
fdt_downbase[1]:0xc480
fdt_downbase[2]:0xa780
fdt_downbase[3]:0xb980
fdt_downbase[4]:0xa980
fdt_downbase[5]:0xb980
